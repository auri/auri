name: Auri

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*.*.*'

# unfortunately there is no way to reuse job init steps :-(
# https://stackoverflow.com/questions/65242830/in-a-github-actions-workflow-is-there-a-way-to-have-multiple-jobs-reuse-the-sam
# https://github.community/t/github-actions-configure-defaults-option/18438

jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18.2' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}

      - name: setup environment
        run: |
          go install github.com/mgechev/revive@latest
      - name: linting
        run: revive -config revive.toml -formatter stylish $(go list ./... | grep -v /vendor/)

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18.2' ]
        gobuffalo: [ '0.17.5' ]
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: auri_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}

      - name: setup environment
        run: |
          go install github.com/gobuffalo/cli/cmd/buffalo@v${{ matrix.gobuffalo }}
      - name: run unit tests
        run: |
           cp fixtures/testing-config.env .env
           make test

  build-data:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build_data.outputs.version }}
      release: ${{ steps.build_data.outputs.release }}
      upload_target: ${{ steps.build_data.outputs.target }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: determine last major.minor version
        id: determine_last_version
        run: |
          last_tag=$(git describe --tags $(git rev-list --tags --max-count=1 ))
          if [[ ! "$last_tag" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
            echo "Last tag found doesn't match the tag scheme v1.2.3";
            exit 1;
          fi
          echo "::set-output name=version::$(echo $last_tag | cut -dv -f2 | cut -d. -f1-2)"
          echo "::set-output name=patch_version::$(echo $last_tag | cut -dv -f2 | cut -d. -f3)"
      - name: set build data
        id: build_data
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/.*$ ]]; then
            echo "Running on the release tag - building release..."
            echo "::set-output name=version::${{ steps.determine_last_version.outputs.version }}.${{ steps.determine_last_version.outputs.patch_version }}"
            echo "::set-output name=release::0"
            echo "::set-output name=target::auri/releases"
          else
            echo "Running on the branch - building nightly..."
            echo "::set-output name=version::${{ steps.determine_last_version.outputs.version }}.9999"
            echo "::set-output name=release::${{ github.run_number }}"
            echo "::set-output name=target::auri/nightly"
          fi

  build-binary:
    runs-on: ubuntu-latest
    needs:
      - build-data
    strategy:
      matrix:
        go: [ '1.18.2' ]
        node: [ '14' ]
        gobuffalo: [ '0.17.5' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-yarn-
      - name: setup environment
        run: |
          go install github.com/gobuffalo/cli/cmd/buffalo@v${{ matrix.gobuffalo }}
      - name: build the binary
        run: |
          yarn install
          make build VERSION=${{ needs.build-data.outputs.version }}-${{ needs.build-data.outputs.release }}
      - uses: actions/upload-artifact@v2
        with:
          name: auri-binary
          path: bin/auri

  build-rpm:
    runs-on: ubuntu-latest
    needs:
      - build-data
      - build-binary
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: auri-binary
          path: bin/
      - name: setup environment
        run: |
          mkdir -p rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
      - name: prepare rpm sources
        run: |
          cp bin/auri  rpm/assets/
          cd rpm/assets/
          tar cfz ../../rpmbuild/SOURCES/auri.tgz *
      - name: set proper version numbers
        run: |
          sed -i 's/Version:.*/Version:        ${{ needs.build-data.outputs.version }}/' rpm/auri.spec
          sed -i 's/Release:.*/Release:        ${{ needs.build-data.outputs.release }}/' rpm/auri.spec
      - name: build rpm
        run: |
          rpmbuild -ba rpm/auri.spec --define "_topdir $PWD/rpmbuild"
      - uses: actions/upload-artifact@v2
        with:
          name: auri.src.rpm
          path: rpmbuild/SRPMS/*.rpm
      - uses: actions/upload-artifact@v2
        with:
          name: auri.rpm
          path: rpmbuild/RPMS/x86_64/*.rpm

  upload-release-assets:
    if: github.repository == 'auri/auri' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build-rpm
      - build-binary
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: auri.src.rpm
      - uses: actions/download-artifact@v2
        with:
          name: auri.rpm
      - uses: actions/download-artifact@v2
        with:
          name: auri-binary
      - name: rename auri binary
        run: mv auri auri-binary-linux-x86_64
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.rpm
            auri-binary-linux-x86_64

  upload-rpm:
    if: github.repository == 'auri/auri' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    needs:
      - build-data
      - build-rpm
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: auri.src.rpm
      - name: setup environment
        run: pip install -r support/ci/copr-cli/requirements.txt
      - name: prepare copr token
        run: |
          mkdir -p ~/.config/
          cat > ~/.config/copr <<EOF
          [copr-cli]
          login = ${{ secrets.COPR_LOGIN }}
          username = auri
          token = ${{ secrets.COPR_TOKEN }}
          copr_url = https://copr.fedorainfracloud.org
          EOF
      - name: upload source rpm
        run: copr-cli build --nowait ${{ needs.build-data.outputs.upload_target }} *.src.rpm
